names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity magnitude at 500m at several time lags
var = "VelMag500"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity magnitude at 600m at several time lags
var = "VelMag600"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity magnitude at 700m at several time lags
var = "VelMag700"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 0m at several time lags
var = "VelAsp0"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 100m at several time lags
var = "VelAsp100"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 200m at several time lags
var = "VelAsp200"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 300m at several time lags
var = "VelAsp300"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 400m at several time lags
var = "VelAsp400"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 500m at several time lags
var = "VelAsp500"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 600m at several time lags
var = "VelAsp600"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test velocity aspect at 700m at several time lags
var = "VelAsp700"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test SSH at 0m at several time lags
var = "SSH0"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test Chl at 0m at several time lags
var = "Chl0"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test FSLE at 0m at several time lags
var = "FSLE0"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test GSLat at several time lags
var = "GSLat"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test salinity at 600m at several time lags
var = "Sal600"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Test salinity at 700m at several time lags
var = "Sal700"
colInd = which(!is.na(str_match(colnames(data),var)))
AIC_comp = matrix(ncol=length(colInd),nrow=1)
names = character()
for (i in 1:length(colInd)){
mod = glm(Pres~mSpline(data[,colInd[i]],knots=quantile(data[,colInd[i]],probs=c(0.275,0.5,0.725)),
Boundary.knots=c(min(data[,colInd[i]]),max(data[,colInd[i]]))),
data=data,family=poisson)
AIC_comp[1,i] = AIC(mod)[[1]]
names = c(names,colnames(data)[colInd[i]])
}
colnames(AIC_comp) = names
AIC_comp
colnames(AIC_comp)[order(AIC_comp)]
# Fill in smoothVarList based on selection made above
smoothVarList = c("Temp0Lag56",
"Temp700",
"Sal0Lag21",
"Sal700",
"VelMag0Lag28",
"VelMag700Lag14",
"VelAsp0",
"VelAsp700Lag21",
"SSH0",
"Chl0",
"FSLE0Lag14",
"GSLatLag28")
pres = which(data$Pres>0)
presDF = data[pres,]
for (i in 1:length(smoothVarList)){
# Plot presence bins across all data for each covar
edges = seq(min(data[[smoothVarList[i]]]),max(data[[smoothVarList[i]]]),length.out=50)
binDiff = diff(edges[1:2])
plotDF = data.frame(Obs=histc(data[[smoothVarList[i]]],edges=edges)$cnt/dim(data)[1],
Pres=histc(presDF[[smoothVarList[i]]],edges=edges)$cnt/dim(presDF)[1],
BinCenter=seq(min(data[[smoothVarList[i]]])+(0.5*binDiff),
max(data[[smoothVarList[i]]])+(0.5*binDiff),
by=binDiff))
print(ggplot(plotDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + labs(y="Normalized Counts",x=NULL,title=smoothVarList[i]
) + theme_minimal())
print(ggplot(data
)+geom_point(aes(x=.data[[smoothVarList[i]]],y=Pres)
)+geom_smooth(aes(x=.data[[smoothVarList[i]]],y=Pres),
method="loess"
)+labs(title=smoothVarList[i]))
}
# Fill in smoothVarList based on selection made above
smoothVarList = c("Temp0Lag56",
"Temp700",
"Sal0Lag21",
"Sal700",
"VelMag0Lag28",
"VelMag700Lag14",
"VelAsp0",
"VelAsp700Lag21",
"SSH0",
"Chl0",
"FSLE0Lag14",
"GSLatLag28")
pres = which(data$Pres>0)
presDF = data[pres,]
for (i in 1:length(smoothVarList)){
# Plot presence bins across all data for each covar
edges = seq(min(data[[smoothVarList[i]]]),max(data[[smoothVarList[i]]]),length.out=50)
binDiff = diff(edges[1:2])
plotDF = data.frame(Obs=histc(data[[smoothVarList[i]]],edges=edges)$cnt/dim(data)[1],
Pres=histc(presDF[[smoothVarList[i]]],edges=edges)$cnt/dim(presDF)[1],
BinCenter=seq(min(data[[smoothVarList[i]]])+(0.5*binDiff),
max(data[[smoothVarList[i]]])+(0.5*binDiff),
by=binDiff))
print(ggplot(plotDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + labs(y="Normalized Counts",x=NULL,title=smoothVarList[i]
) + theme_minimal())
print(ggplot(data
)+geom_point(aes(x=.data[[smoothVarList[i]]],y=Pres)
)+geom_smooth(aes(x=.data[[smoothVarList[i]]],y=Pres),
method="loess"
)+labs(title=smoothVarList[i]))
}
# Fill in smoothVarList based on selection made above
smoothVarList = c("Temp0Lag56",
"Temp700",
"Sal0Lag21",
"Sal700",
"VelMag0Lag28",
"VelMag700Lag14",
"VelAsp0",
"VelAsp700Lag21",
"SSH0",
"Chl0",
"FSLE0Lag14",
"GSLatLag28",
"GSDist",
"Slope",
"Aspect")
pres = which(data$Pres>0)
presDF = data[pres,]
for (i in 1:length(smoothVarList)){
# Plot presence bins across all data for each covar
edges = seq(min(data[[smoothVarList[i]]]),max(data[[smoothVarList[i]]]),length.out=50)
binDiff = diff(edges[1:2])
plotDF = data.frame(Obs=histc(data[[smoothVarList[i]]],edges=edges)$cnt/dim(data)[1],
Pres=histc(presDF[[smoothVarList[i]]],edges=edges)$cnt/dim(presDF)[1],
BinCenter=seq(min(data[[smoothVarList[i]]])+(0.5*binDiff),
max(data[[smoothVarList[i]]])+(0.5*binDiff),
by=binDiff))
print(ggplot(plotDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + labs(y="Normalized Counts",x=NULL,title=smoothVarList[i]
) + theme_minimal())
print(ggplot(data
)+geom_point(aes(x=.data[[smoothVarList[i]]],y=Pres)
)+geom_smooth(aes(x=.data[[smoothVarList[i]]],y=Pres),
method="loess"
)+labs(title=smoothVarList[i]))
}
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
+Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
+SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
+GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
+Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
+SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
# +GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
+Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
# +SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
+GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
+Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
+SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
# +GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
+Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
# +SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
# +GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Temp0Lag56
+Temp700
+Sal0Lag21
# +Sal700
+VelMag0Lag28
+VelMag700Lag14
+VelAsp0
+VelAsp700Lag21
# +SSH0
+Chl0
+FSLE0Lag14
# +GSLatLag28
# +GSDist
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
