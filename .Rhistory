} else if (k==2){
lag=14
lagInd = startInd-lag
} else if (k==3){
lag=21
lagInd = startInd-lag
}
eval(parse(text=paste('FSLE$',sites[i],'Lag',lag,' = NA',sep="")))
eval(parse(text=paste('FSLE$',sites[i],'Lag',lag,'[startInd:',fullLength,'] = FSLE$',sites[i],'[lagInd:(',fullLength,'-lag)]',sep="")))
}
}
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
View(FSLE)
debugSource("D:/Code/HabitatModeling/reGrid_covars.R", echo=TRUE)
source("D:/Code/HabitatModeling/reGrid_covars.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
View(FSLE)
#     }
#
#     # Save data as .csv
#     eval(parse(text=paste("write.csv(full",vars[j],",file=\"J:/Chpt_3/CovarPlots/",vars[j],"_TS.csv\",row.names=FALSE)",sep="")))
#
#   }
#
# }
## Clean Chla Data  --------------------------------------
# Downloaded Chla data are daily at 1/24th (0.04166667) degree spatial resolution
load('J:/Chpt_3/CovarTS/Chl_TS_4Averaged.Rdata')
Chl = data.frame(Time=as.Date(masterData.Time[1,],origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
View(Chl)
sites = colnames(Chl)
# Plot histograms
for (i in 2:12){
eval(parse(text=(paste(sites[i],' = ggplot(data=Chl)+geom_histogram(aes(x=',sites[i],'))+labs(x=expression("mg/m"^3),title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',"Chl_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ0,OC0,NC0,BC0,WC0,NFC0,HAT0,GS0,BP0,BS0,JAX0, ncol=4,nrow=3,top="Chl")
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
q=stack(Chl[,2:12])
View(q)
Chl$HZ0[is.nan(Chl$HZ0)]=NA
View(Chl)
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
for (i in 2:12){
eval(parse(text=(paste(sites[i],' = ggplot(data=Chl)+geom_histogram(aes(x=',sites[i],'))+labs(x=expression("mg/m"^3),title=sites[i])',sep=""))))
}
grid.arrange(HZ0,OC0,NC0,BC0,WC0,NFC0,HAT0,GS0,BP0,BS0,JAX0, ncol=4,nrow=3,top="Chl")
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
sites = colnames(Chl)
# Plot histograms
for (i in 2:12){
eval(parse(text=(paste(sites[i],' = ggplot(data=Chl)+geom_histogram(aes(x=',sites[i],'))+labs(x=expression("mg/m"^3),title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',"Chl_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ0,OC0,NC0,BC0,WC0,NFC0,HAT0,GS0,BP0,BS0,JAX0, ncol=4,nrow=3,top="Chl")
while (dev.cur()>1) {dev.off()}
View(Chl)
boxplot(Chl$HZ0)
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
hist(Chl$HZ0)
Chl$HZ0[is.nan(Chl$HZ0)] = NA
hist(Chl$HZ0)
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
ggsave(paste(outDir,'/',"Chl_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
inDir = 'J:/Chpt_3/CovarTS'
outDir = 'J:/Chpt_3/CovarPlots'
fileList = dir(inDir)
load('J:/Chpt_3/CovarTS/Chl_TS_4Averaged.Rdata')
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
sites = colnames(Chl)
# Plot histograms
for (i in 2:12){
eval(parse(text=(paste(sites[i],' = ggplot(data=Chl)+geom_histogram(aes(x=',sites[i],'))+labs(x=expression("mg/m"^3),title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',"Chl_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ0,OC0,NC0,BC0,WC0,NFC0,HAT0,GS0,BP0,BS0,JAX0, ncol=4,nrow=3,top="Chl")
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
ggsave(paste(outDir,'/',"Chl_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
q25 = quantile(stack(Chl)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Chl)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
# Check for missing dates
timeDiff = diff(as.numeric(Chl$Time))
any(timeDiff>1)
plot(Chl$HZ0)
i=2
datBins = which(!is.na(Chl[,i]))
missChl = approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear")
plot(missChl)
startInd = which(Chl$Time==as.Date('2016-05-01',origin="1970-01-01"))
fullLength = length(Chl$Time)
for (i in 2:12){
for (k in 1:3){
if (k==1){
lag = 7
lagInd = startInd-lag
} else if (k==2){
lag=14
lagInd = startInd-lag
} else if (k==3){
lag=21
lagInd = startInd-lag
}
eval(parse(text=paste('Chl$',sites[i],'Lag',lag,' = NA',sep="")))
eval(parse(text=paste('Chl$',sites[i],'Lag',lag,'[startInd:',fullLength,'] = Chl$',sites[i],'[lagInd:(',fullLength,'-lag)]',sep="")))
}
}
View(Chl)
write.csv(Chl,file=paste(outDir,'/','Chl_TS.csv',sep=""),row.names=FALSE)
source("D:/Code/HabitatModeling/stitchProfiles.R", echo=TRUE)
plot(HZProfile[1,])
plot(HZProfile[4,])
plot(HZProfile[7,])
source("D:/Code/HabitatModeling/stitchProfiles.R", echo=TRUE)
source("D:/Code/HabitatModeling/stitchProfiles.R", echo=TRUE)
source("D:/Code/HabitatModeling/stitchProfiles.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
fileList[TSind]
View(masterData.Data)
plot(masterData.Data[1,])
plot(masterData.Data[2,])
plot(masterData.Data[3,])
plot(masterData.Data[4,])
plot(masterData.Data[5,])
plot(masterData.Data[6,])
plot(masterData.Data[7,])
plot(masterData.Data[8,])
plot(masterData.Data[9,])
plot(masterData.Data[10,])
plot(masterData.Data[11,])
View(SSHDF)
SSHDF = data.frame(t(masterData.Data))
sites = c('HZ0','OC0','NC0','BC0','WC0','NFC0','HAT0','GS0','BP0','BS0','JAX0')
SSHDF = data.frame(t(masterData.Data))
colnames(SSHDF) = sites
for (i in 1:10){
eval(parse(text=(paste(sites[i],' = ggplot(data=SSHDF)+geom_histogram(aes(x=',sites[i],'))+labs(x="m",y="",title=sites[i])',sep=""))))
}
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(SSHDF))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y="m",title="SSH")
plot(SSHDF$HZ0)
plot(SSHDF$OC0)
plot(SSHDF$NC0)
plot(SSHDF$BC0)
plot(SSHDF$WC0)
plot(SSHDF$NFC0)
plot(SSHDF$HAT0)
plot(SSHDF$GS0)
plot(SSHDF$BP0)
plot(SSHDF$BS0)
plot(SSHDF$JAX0)
# Remove outliers?
for (i in 1:11){
q = round(SSHDF[,i],digits=10)
SSHDF[q==0,i] = NA
}
plot(SSHDF$JAX0)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
View(fullSSH)
eval(parse(text=paste('skipped = which(is.na(fullSSH$',sites[i],'))',sep="")))
paste('fullSSH$',sites[i],' = approx(x=SSHDF[datBins,1],y=SSHDF[datBins,i+1],xout=fullSSH[,1],method="linear")',sep="")
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
eval(parse(text=paste('fullSSH$',sites[i],'=NA',sep="")))
eval(parse(text=paste('fullSSH$',sites[i],' = approx(x=SSHDF[datBins,1],y=SSHDF[datBins,i+1],xout=fullSSH[,1],method="linear")',sep="")))
paste('fullSSH$',sites[i],' = approx(x=SSHDF[datBins,1],y=SSHDF[datBins,i+1],xout=fullSSH[,1],method="linear")',sep="")
eval(parse(text=paste('fullSSH$',sites[i],' = approx(x=masterData.Time[datBins],y=SSHDF[datBins,i+1],xout=fullSSH[,1],method="linear")',sep="")))
paste('fullSSH$',sites[i],' = approx(x=masterData.Time[datBins],y=SSHDF[datBins,i+1],xout=fullSSH[,1],method="linear")',sep="")
eval(parse(text=paste('fullSSH$',sites[i],' = approx(x=masterData.Time[datBins],y=SSHDF[datBins,i],xout=fullSSH[,1],method="linear")',sep="")))
approx(x=masterData.Time[datBins],y=SSHDF[datBins,i],xout=fullSSH[,1],method="linear")
q=approx(x=masterData.Time[datBins],y=SSHDF[datBins,i],xout=fullSSH[,1],method="linear")
View(q)
eval(parse(text=paste('fullSSH$',sites[i],' = (approx(x=masterData.Time[datBins],y=SSHDF[datBins,i],xout=fullSSH[,1],method="linear"))$y',sep="")))
View(fullSSH)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
i=11
# fixedHYCOMTime = floor_date(as_date((HYCOM$Time[[i]][[1]][1:chopInd]-719529),origin="1970-01-01"),unit="day")
datBins = which(!is.na(SSHDF[,i]))
eval(parse(text=paste('fullSSH$',sites[i],'=NA',sep="")))
eval(parse(text=paste('fullSSH$',sites[i],' = (approx(x=masterData.Time[datBins],y=SSHDF[datBins,i],xout=fullSSH[,1],method="linear"))$y',sep="")))
View(fullSSH)
startInd = which(fullSSH$Time==as.Date('2016-05-01',origin="1970-01-01"))
fullLength = length(fullSSH$Time)
for (i in 1:10){
for (k in 1:3){
if (k==1){
lag = 7
lagInd = startInd-lag
} else if (k==2){
lag=14
lagInd = startInd-lag
} else if (k==3){
lag=21
lagInd = startInd-lag
}
eval(parse(text=paste('fullSSH$',sites[i],'Lag',lag,' = NA',sep="")))
eval(parse(text=paste('fullSSH$',sites[i],'Lag',lag,'[startInd:',fullLength,'] = fullSSH$',sites[i],'[lagInd:(',fullLength,'-lag)]',sep="")))
}
}
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
fileList[TSind]
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
View(Temp)
for (i in 1:10){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
for (i in 1:10){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
eval(parse(text=paste('Temp = data.frame(HZ',depths[l],'=HZProfile[l,],
OC',depths[l],'=OCProfile[l,],
NC',depths[l],'=NCProfile[l,],
BC',depths[l],'=BCProfile[l,],
WC',depths[l],'=WCProfile[l,],
NFC',depths[l],'=NFCProfile[l,],
HAT',depths[l],'=HATProfile[l,],
GS',depths[l],'=GSProfile[l,],
BP',depths[l],'=BPProfile[l,],
BS',depths[l],'=BSProfile[l,]),
JAX',depths[l],'=JAXProfile[l,])',sep="")))
sites = colnames(Temp)
siteName = str_replace(sites,as.character(depths[l]),"")
eval(parse(text=paste('Temp = data.frame(HZ',depths[l],'=HZProfile[l,],
OC',depths[l],'=OCProfile[l,],
NC',depths[l],'=NCProfile[l,],
BC',depths[l],'=BCProfile[l,],
WC',depths[l],'=WCProfile[l,],
NFC',depths[l],'=NFCProfile[l,],
HAT',depths[l],'=HATProfile[l,],
GS',depths[l],'=GSProfile[l,],
BP',depths[l],'=BPProfile[l,],
BS',depths[l],'=BSProfile[l,],
JAX',depths[l],'=JAXProfile[l,])',sep="")))
sites = colnames(Temp)
siteName = str_replace(sites,as.character(depths[l]),"")
for (i in 1:10){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
for (i in 1:11){
eval(parse(text=paste('Temp$',sites[i],'[is.nan(Temp$',sites[i], ')] = NA',sep="")))
eval(parse(text=paste('Temp$',sites[i],'[Temp$',sites[i],'==0] = NA',sep="")))
}
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y="m",title=paste(vars[j]),' at ',as.character(depths[l]),'m',sep="")
ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j-1],title=sites[i])',sep=""))))
}
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j]),' at ',as.character(depths[l]),'m',sep="")
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep="")
ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
# Remove outliers?
q25 = quantile(stack(Temp)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Temp)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
upperThresh = q75+(1.5*iqr)
lowerThresh = q25-(1.5*iqr)
# Check for missing dates
timeDiff = diff(masterData.Time)
skipped = which(timeDiff>1)
# Interpolate missing dates
if (!isempty(skipped)){
for (i in 1:10){
# fixedHYCOMTime = floor_date(as_date((HYCOM$Time[[i]][[1]][1:chopInd]-719529),origin="1970-01-01"),unit="day")
eval(parse(text=paste('putWhere1 = match(masterData.Time,full',vars[j],'$Time)',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],'[putWhere1[!is.na(putWhere1)]]=Temp$',sites[i],'[-which(is.na(putWhere1))]',sep="")))
missData = apply(cbind(Temp[skipped,i],Temp[skipped+1,i]),MARGIN=1,mean)
missTimes = masterData.Time[skipped]+1
eval(parse(text=paste('putWhere2 = match(missTimes,full',vars[j],'$Time)',sep=""))) # indices where data is missing
missData = missData[-which(is.na(putWhere2))]
putWhere2 = putWhere2[-which(is.na(putWhere2))]
eval(parse(text=paste('full',vars[j],'$',sites[i],'[putWhere2] = missData',sep="")))
}
} else {
for (i in 1:10){
eval(parse(text=paste('putWhere1 = match(masterData.Time,full',vars[j],'$Time)',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],'[putWhere1[!is.na(putWhere1)]]=Temp$',sites[i],'[-which(is.na(putWhere1))]',sep="")))
}
}
}
# Check for NAs and linearly interpolate across gaps
for (i in 2:91){
eval(parse(text=paste('skippedBins = which(is.na(full',vars[j],'[,i]))',sep=""))) # missing data
if(any(diff(skippedBins)==1)){
eval(parse(text=paste('datBins = setdiff(1:dim(full',vars[j],')[1],skippedBins)',sep="")))
eval(parse(text=paste('missDatNS = approx(x=full',vars[j],'[datBins,1],y=full',vars[j],'[datBins,i],xout=full',vars[j],'[,1],method=\"linear\")',sep="")))
} else {
eval(parse(text=paste('missData = apply(cbind(full',vars[j],'[skippedBins-1,i],full',vars[j],'[skippedBins+1,i]),MARGIN=1,mean)',sep="")))
eval(parse(text=paste('full',vars[j],'[skippedBins,i] = missData',sep="")))
}
}
if (eval(parse(text=paste('any(full',vars[j],'<0)',sep="")))){
return('WARNING: SPURIOUS NEGATIVE VALUES CHECK DATA')
}
# Create time lagged vectors
eval(parse(text=paste('startInd = which(full',vars[j],'$Time==as.Date("2016-05-01",origin="1970-01-01"))',sep="")))
eval(parse(text=paste('fullLength = length(full',vars[j],'$Time)',sep="")))
eval(parse(text=paste('fullColNames = colnames(full',vars[j],')',sep="")))
for (i in 2:length(fullColNames)){
for (k in 1:3){
if (k==1){
lag = 7
lagInd = startInd-lag
} else if (k==2){
lag=14
lagInd = startInd-lag
} else if (k==3){
lag=21
lagInd = startInd-lag
}
# baseData = paste(sites[i],'0',sep="")
# thisDepth =
eval(parse(text=paste('full',vars[j],'$',fullColNames[i],'Lag',lag,' = NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',fullColNames[i],'Lag',lag,'[startInd:',fullLength,'] = full',vars[j],'$',fullColNames[i],'[lagInd:(',fullLength,'-lag)]',sep="")))
}
}
# Save data as .csv
eval(parse(text=paste("write.csv(full",vars[j],",file=\"J:/Chpt_3/CovarPlots/",vars[j],"_TS.csv\",row.names=FALSE)",sep="")))
}
}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j-1],title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
# Remove outliers?
q25 = quantile(stack(Temp)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Temp)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
upperThresh = q75+(1.5*iqr)
lowerThresh = q25-(1.5*iqr)
View(Temp)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
View(Temp)
View(fullSalinity)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
warnings()
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
paste("write.csv(full",vars[j],",file=\"J:/Chpt_3/CovarTS/",vars[j],"_TS.csv\",row.names=FALSE)",sep="")
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
inDir = 'J:/Chpt_3/CovarTS'
outDir = 'J:/Chpt_3/CovarPlots'
fileList = dir(inDir)
## Clean Chla Data  --------------------------------------
# Downloaded Chla data are daily at 1/24th (0.04166667) degree spatial resolution, effectively re-gridded to 0.08deg
load('J:/Chpt_3/CovarTS/Chl_TS_4Averaged.Rdata')
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
sites = colnames(Chl)
# Plot histograms
for (i in 2:12){
eval(parse(text=(paste(sites[i],' = ggplot(data=Chl)+geom_histogram(aes(x=',sites[i],'))+labs(x=expression("mg/m"^3),title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',"Chl_hist.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ0,OC0,NC0,BC0,WC0,NFC0,HAT0,GS0,BP0,BS0,JAX0, ncol=4,nrow=3,top="Chl")
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Chl[,2:12]))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=expression("mg/m"^3),title="Chl")
ggsave(paste(outDir,'/',"Chl_boxplot.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
q25 = quantile(stack(Chl)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Chl)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
# Check for missing dates
timeDiff = diff(as.numeric(Chl$Time))
any(timeDiff>1)
View(Chl)
plot(Chl$HZ0)
i=2
datBins = which(!is.na(Chl[,i]))
Chl[,i] = approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear")
Chl[,i] = (approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear"))$y
plot(Chl$HZ0)
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
i=2
datBins = which(!is.na(Chl[,i]))
q=(approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear"))$y
plot(q)
plot(Chl$HZ0)
datBins = which(!is.na(Chl[,i]))
plot(Chl$HZ0)
datBins = which(!is.na(Chl[,i]))
Chl[,i] = (approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear"))$y
plot(Chl$HZ0)
Chl = data.frame(Time=as.Date(masterData.Time,origin="1970-01-01"),HZ0=masterData.Data[1,],
OC0=masterData.Data[2,],NC0=masterData.Data[3,],BC0=masterData.Data[4,],
WC0=masterData.Data[5,],NFC0=masterData.Data[6,],HAT0=masterData.Data[7,],GS0=masterData.Data[8,],
BP0=masterData.Data[9,],BS0=masterData.Data[10,],JAX0=masterData.Data[11,])
# Interpolate missing values (many missing, need to interpolate whole TS at each
# site, instead of just interpolating across occasional gaps)
for (i in 2:12){
datBins = which(!is.na(Chl[,i]))
Chl[,i] = (approx(x=Chl[datBins,1],y=Chl[datBins,i],xout=Chl[,1],method="linear"))$y
}
# Create time lagged vectors
startInd = which(Chl$Time==as.Date('2016-05-01',origin="1970-01-01"))
fullLength = length(Chl$Time)
for (i in 2:12){
for (k in 1:3){
if (k==1){
lag = 7
lagInd = startInd-lag
} else if (k==2){
lag=14
lagInd = startInd-lag
} else if (k==3){
lag=21
lagInd = startInd-lag
}
eval(parse(text=paste('Chl$',sites[i],'Lag',lag,' = NA',sep="")))
eval(parse(text=paste('Chl$',sites[i],'Lag',lag,'[startInd:',fullLength,'] = Chl$',sites[i],'[lagInd:(',fullLength,'-lag)]',sep="")))
}
}
View(Chl)
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
paste(inDir,'/','FSLE_TS.csv',sep="")
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
fileList[TSind]
fileList
fileList = dir(inDir,pattern=".Rdata")
debugSource("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
fileList[TSind]
source("D:/Code/HabitatModeling/DataWrangling_forHabMods.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/combine_Acoustic_with_covars.R", echo=TRUE)
View(speciesInd)
View(speciesList)
str_detect(dailyTotsFiles[i], sites[j])
dailyTotsFiles[i]
View(dailyTots)
paste(dfList[j],"=cbind(",dfList[j],",as.Date(fileDate))")
View(tempBlainville)
View(dailyTots)
View(speciesList)
speciesInd$Ind1[j]
View(speciesInd)
View(tempBlainville)
View(tempCuvier)
View(tempUD26)
paste(masterDfList[j],"=rbind(",masterDfList[j],",",dfList[j],")")
