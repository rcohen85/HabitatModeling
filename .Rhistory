)+theme(plot.margin=margin(c(0,0,0,0),unit="pt"))
direction_labeller <- function(x){
ifelse(x %% 45 == 0, c('E','NE','N','NW','W','SW','S','SE')[1+(as.integer(x/45) %% 8)], '')}
my_colors=c("#2E22EA","#9E3DFB","#F86BE2","#FCCE7B","#C4E416","#4BBA0F","#447D87","#2C24E9")
plotList[[profileName]] = ggplot(profileDF,aes(x=x,y=y,z=z) # plot profile for this year
)+geom_contour_filled(
)+scale_fill_manual(
values=my_colors,
guide=NULL
)+coord_cartesian(xlim=c(st,ed)
)+scale_x_continuous(breaks=c(seq.Date(from=st,to=ed,by="quarter"))
)+scale_y_reverse(
)+ggtitle(profileName
)+labs(x=NULL,y=NULL
)+theme(plot.margin=margin(c(0,0,0,0),unit="pt"))
hues_df = data.frame(degree = 0:359) %>%
mutate(
label=direction_labeller(degree+90 %% 360),
colors = colorRampPalette(my_colors)(360))
plotList[["ColorLegend"]] = ggplot(hues_df
)+geom_rect(aes(ymin=3,
ymax=4,
xmin=degree-0.5,
xmax=degree+0.5,
color=colors,
fill=colors)
)+coord_polar(direction=-1,
start=0
)+scale_color_identity(
)+scale_fill_identity(
)+guides(fill=FALSE,color=FALSE
)+theme_void(
)+ylim(c(1,4.5)
)+geom_text(aes(x=degree,
y=4.5,
label=label))
grid.arrange(plotList$Pres,plotList[[profileName]],plotList[["ColorLegend"]],
ncol=12,nrow=3,top=paste('Common Dolphins at',sites[j]),layout_matrix=rbind(c(rep(1,11),NA),
c(rep(2,11),NA),
c(rep(2,11),3)))
} else {
plotList[['Pres']] = ggplot(plotDF,aes(x=Date) # plot presence in this year
)+geom_line(aes(y=Pres)
)+scale_x_continuous(breaks=c(seq.Date(from=st,to=ed,by="quarter"))
)+coord_cartesian(xlim=c(st,ed)
)+ggtitle('Presence'
)+labs(x=NULL,y=NULL
)+theme(plot.margin=margin(c(0,40,0,0),unit="pt"))
plotList[[profileName]] = ggplot(profileDF,aes(x=x,y=y,z=z) # plot profile for this year
)+geom_contour_filled(
)+coord_cartesian(xlim=c(st,ed)
)+scale_x_continuous(breaks=c(seq.Date(from=st,to=ed,by="quarter"))
)+scale_y_reverse(
)+ggtitle(profileName
)+labs(x=NULL,y=NULL
)+theme(plot.margin=margin(c(0,0,0,0),unit="pt"),
legend.position="right",
legend.title=element_text(size=0),
legend.text=element_text(size=7),
legend.key.size=unit(0.5,'lines'),
legend.direction="vertical",
legend.margin=margin(0))
grid.arrange(plotList$Pres,plotList[[profileName]],
ncol=12,nrow=3,top=paste('Common Dolphins at',sites[j]),layout_matrix=rbind(c(rep(1,12)),
c(rep(2,12)),
c(rep(2,12))))
}
}
}
}
}
# Get p-values
getPvalues(colMod)
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Sal0
+SSH0
+Chl0
+Temp0
+Sal200
+GSLat
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# Test whether continuous covars should be included in model as linear or smooth terms
startTime = Sys.time()
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"Slope",
"Aspect")
modOpts = c("linMod","smoothMod")
AIC_votes = matrix(nrow=length(smoothVarList),ncol=3)
for (i in 1:length(smoothVarList)){
# linMod = geeglm(Pres~data[[smoothVarList[i]]],data=data,family=poisson,id=GroupID,corstr="ar1")
#
# smoothMod = geeglm(Pres~mSpline(data[[smoothVarList[i]]],
#                                 knots=quantile(data[[smoothVarList[i]]],probs=c(0.275,0.5,0.725)),
#                                 Boundary.knots=c(min(data[[smoothVarList[i]]]),max(data[[smoothVarList[i]]]))),
#                    data=data,
#                    family=poisson,
#                    id=GroupID,
#                    corstr="ar1")
modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
# modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
# modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275,0.5,0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod = eval(parse(text=modelCall))
AIC_votes[i,1:2] = c(AIC(linMod)[[1]],AIC(smoothMod)[[1]])
AIC_votes[i,3] = modOpts[which.min(AIC_votes[i,1:2])]
}
endTime = Sys.time()
endTime-startTime
colnames(AIC_votes) = c(modOpts,"Best")
rownames(AIC_votes) = smoothVarList
AIC_votes
# Make smooth terms, run full model and check autocorrelation of residuals, revise grouping variable if necessary
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"Slope",
"Aspect")
linVarList = c()
smoothNameList = character()
for (i in 1:length(smoothVarList)){
if (str_detect(smoothVarList[i],"Asp")){
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')),periodic=TRUE)',sep="")))
} else {
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')))',sep="")))
}
smoothNameList = c(smoothNameList,paste('S_',smoothVarList[i],sep=""))
}
thisForm = formula(paste('Pres~',paste(c(smoothNameList,linVarList),collapse="+"),sep=""))
colMod = geeglm(thisForm,
family=poisson,
data=data,
id=GroupID,
corstr="ar1")
modACF = acf(residuals(colMod),lag.max=180)
# Get p-values
getPvalues(colMod)
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0")
linVarList = c()
smoothNameList = character()
for (i in 1:length(smoothVarList)){
if (str_detect(smoothVarList[i],"Asp")){
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')),periodic=TRUE)',sep="")))
} else {
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')))',sep="")))
}
smoothNameList = c(smoothNameList,paste('S_',smoothVarList[i],sep=""))
}
thisForm = formula(paste('Pres~',paste(c(smoothNameList,linVarList),collapse="+"),sep=""))
fullMod = geeglm(thisForm,
family=poisson,
data=data,
id=GroupID,
corstr="ar1")
# Get p-values
getPvalues(fullMod)
source("plotSmooths.R")
terms = names(fullMod$model)[2:length(names(fullMod$model))]
terms = str_remove(terms,"S_")
k=5
for (i in 1:length(terms)){
coefInd = which(str_detect(names(fullMod$coefficients),terms[i]))
if (str_detect(terms[i],"Asp")){periodic=TRUE} else {periodic=FALSE}
print(plotSmooths(fullMod,terms[i],coefInd,k,periodic,title=NULL))
}
sites = c("HZ","BC","WC","BS")
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0")
linVarList = c()
siteModList = list()
pValList = list()
for (j in 1:length(sites)){
siteInd = which(!is.na(str_match(data$Site,sites[j])))
modDF = data[siteInd,]
smoothNameList = character()
for (i in 1:length(smoothVarList)){
if (str_detect(smoothVarList[i],"Asp")){
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(modDF$',smoothVarList[i],',knots=quantile(modDF$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(modDF$',smoothVarList[i],'),max(modDF$',smoothVarList[i],')),periodic=TRUE)',sep="")))
} else {
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(modDF$',smoothVarList[i],',knots=quantile(modDF$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(modDF$',smoothVarList[i],'),max(modDF$',smoothVarList[i],')))',sep="")))
}
smoothNameList = c(smoothNameList,paste('S_',smoothVarList[i],sep=""))
}
thisForm = formula(paste('Pres~',paste(c(smoothNameList,linVarList),collapse="+"),sep=""))
siteModList[[sites[j]]] = geeglm(thisForm,
family=poisson,
data=modDF,
id=GroupID,
corstr="ar1")
pValList[[sites[j]]] = getPvalues(siteModList[[sites[j]]])
}
print(pValList)
source("plotSmooths.R")
for (j in 1:length(siteModList)){
terms = names(siteModList[[j]]$model)[2:length(names(siteModList[[j]]$model))]
terms = str_remove(terms,"S_")
k=5
siteName = names(siteModList)[j]
for (i in 1:length(terms)){
coefInd = which(str_detect(names(siteModList[[j]]$coefficients),terms[i]))
if (str_detect(terms[i],"Asp")){periodic=TRUE} else {periodic=FALSE}
print(plotSmooths(siteModList[[j]],terms[i],coefInd,k,periodic,title=siteName))
}
}
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Sal0
+SSH0
+Chl0
+Temp0
+Sal200
+GSLat
+VelMag
+Slope
+Aspect,
family=poisson,
data=data)
View(data)
unique(colnames(data))
# calculate VIF for each of the variables desired in the full model
colMod = glm(Pres~Sal0
+SSH0
+Chl0
+Temp0
+Sal200
+GSLat
+VelMag0
+Slope
+Aspect,
family=poisson,
data=data)
VIFvals = vif(colMod)
VIFvals
# remove vars in stepwise fashion as necessary
# Test whether continuous covars should be included in model as linear or smooth terms
startTime = Sys.time()
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"Slope",
"VelMag0",
"Aspect")
modOpts = c("linMod","smoothMod")
AIC_votes = matrix(nrow=length(smoothVarList),ncol=3)
for (i in 1:length(smoothVarList)){
# linMod = geeglm(Pres~data[[smoothVarList[i]]],data=data,family=poisson,id=GroupID,corstr="ar1")
#
# smoothMod = geeglm(Pres~mSpline(data[[smoothVarList[i]]],
#                                 knots=quantile(data[[smoothVarList[i]]],probs=c(0.275,0.5,0.725)),
#                                 Boundary.knots=c(min(data[[smoothVarList[i]]]),max(data[[smoothVarList[i]]]))),
#                    data=data,
#                    family=poisson,
#                    id=GroupID,
#                    corstr="ar1")
modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
# modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
# modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275,0.5,0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod = eval(parse(text=modelCall))
AIC_votes[i,1:2] = c(AIC(linMod)[[1]],AIC(smoothMod)[[1]])
AIC_votes[i,3] = modOpts[which.min(AIC_votes[i,1:2])]
}
endTime = Sys.time()
endTime-startTime
colnames(AIC_votes) = c(modOpts,"Best")
rownames(AIC_votes) = smoothVarList
AIC_votes
# Make smooth terms, run full model and check autocorrelation of residuals, revise grouping variable if necessary
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"VelMag0"
"Slope",
# Make smooth terms, run full model and check autocorrelation of residuals, revise grouping variable if necessary
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"VelMag0",
"Slope",
"Aspect")
linVarList = c()
smoothNameList = character()
for (i in 1:length(smoothVarList)){
if (str_detect(smoothVarList[i],"Asp")){
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')),periodic=TRUE)',sep="")))
} else {
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')))',sep="")))
}
smoothNameList = c(smoothNameList,paste('S_',smoothVarList[i],sep=""))
}
thisForm = formula(paste('Pres~',paste(c(smoothNameList,linVarList),collapse="+"),sep=""))
colMod = geeglm(thisForm,
family=poisson,
data=data,
id=GroupID,
corstr="ar1")
modACF = acf(residuals(colMod),lag.max=180)
# Get p-values
getPvalues(colMod)
# Make smooth terms, run full model and check autocorrelation of residuals, revise grouping variable if necessary
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Temp0",
"GSLat",
"VelAsp0",
"Slope",
"Aspect")
linVarList = c()
smoothNameList = character()
for (i in 1:length(smoothVarList)){
if (str_detect(smoothVarList[i],"Asp")){
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')),periodic=TRUE)',sep="")))
} else {
eval(parse(text=paste('S_',smoothVarList[i],'= mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.275, 0.5, 0.725)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],')))',sep="")))
}
smoothNameList = c(smoothNameList,paste('S_',smoothVarList[i],sep=""))
}
thisForm = formula(paste('Pres~',paste(c(smoothNameList,linVarList),collapse="+"),sep=""))
colMod = geeglm(thisForm,
family=poisson,
data=data,
id=GroupID,
corstr="ar1")
modACF = acf(residuals(colMod),lag.max=180)
# Get p-values
getPvalues(colMod)
knitr::opts_chunk$set(echo = TRUE)
library(geepack)
library(splines2)
library(lubridate)
library(tidyverse)
library(car)
library(splines2)
library(ggplot2)
library(gridExtra)
library(zoo)
library(pracma)
library(mgcv)
library(SimDesign)
library(multitaper)
source("getPvalues.R")
data = data.frame(read.csv('E:/ModelingCovarData/Master_DFs/UD26_masterDF.csv'))
lagID = 77
numClust = length(data$Pres)/(lagID-1)
if (numClust<length(data$Pres)){
clustID = rep(1:ceiling(numClust),each=lagID)
clustID = clustID[1:length(data$Pres)]
} else {
clustID = 1:length(data$Pres)
}
data$GroupID = clustID
# Round presence to get Poisson dist
data$Pres = round(data$Pres)
smoothVarList = c("SSH0",
"Chl0",
"Sal0",
"Sal700",
"Temp0",
"Temp700",
"VelMag0",
"VelMag700",
"VelAsp0",
"VelAsp700",
"FSLE0",
"Slope",
"Aspect")
QIC_votes = matrix(nrow=length(smoothVarList),ncol=5)
i=1
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,2:3] = c(QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
modOpts = c("linMod","threeKnots","fourKnots","fiveKnots")
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=2
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=3
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[3,1]=NA
QIC_votes[3,3]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=4
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=5
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=6
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=7
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIV_votes[i,1:2]=NA
QIC_votes[i,1:2]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=8
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=9
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIV_votes[i,1:2]=NA
QIC_votes[i,1:2]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=10
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,1:2]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=11
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,2:3]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=12
# modelCall = paste('gam(Pres~data$',smoothVarList[i],',data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~data$',smoothVarList[i],',data=data,family=poisson,id=GroupID,corstr="ar1")',sep="")
linMod = eval(parse(text=modelCall))
# modelCall = paste('gam(Pres~s(data$',smoothVarList[i],',bs="cr"),data=data,family=poisson)',sep="")
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.5)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod1 = eval(parse(text=modelCall))
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
i=13
modelCall = paste('geeglm(Pres~mSpline(data$',smoothVarList[i],',knots=quantile(data$',smoothVarList[i],',probs=c(0.333,0.666)),Boundary.knots=c(min(data$',smoothVarList[i],'),max(data$',smoothVarList[i],'))),data=data,family=poisson,id=GroupID,corstr=\"ar1\")',sep="")
smoothMod2 = eval(parse(text=modelCall))
QIC_votes[i,1:3] = c(QIC(linMod)[[1]],QIC(smoothMod1)[[1]],QIC(smoothMod2)[[1]])
QIC_votes[i,1:2]=NA
QIC_votes[i,5] = modOpts[which.min(QIC_votes[i,1:4])]
colnames(QIC_votes) = c(modOpts,"Best")
rownames(QIC_votes) = smoothVarList[]
QIC_votes
setwd("~/GitHub/HabitatModeling")
