metMat = as.data.frame(metMat)
View(metMat)
# Plot 3D surface plot of ACI
library(plot3D)
inDir = 'W:/projects/2022_NOAA-NERRS_HudsonNY_144488/HawthorneValley/FEP_MVB_2022/AcousticIndices'
ACI_files = list.files(inDir, pattern = ".Rdata")
i=1
thisFile = load(paste(inDir,ACI_files[i],sep="/"))
TS = as.matrix(rep(TSDF$TimeStamps,times=length(binFreqs)))
freqVec = as.matrix(rep(binFreqs,each = nrow(TSDF)))
amp = as.matrix(c(as.matrix(allACImat)))
surf3D(x=TS,y=freqVec,z=amp)
histogram(freqVec)
hist(freqVec)
hist(TS)
plot(TSDF$TimeStamps)
rgl::plot3d(TS,freqVec,amp)
install.packages("rgl")
library(rgl)
rgl::plot3d(TS,freqVec,amp)
library(plotly)
install.packages("cli")
library(plotly)
uninstall.packages('cli')
library(installr)
uninstall.packages('cli')
install.packages('cli')
library(cli)
uninstall.packages('cli')
library(installr)
uninstall.packages('cli')
install.packages('cli')
View(TSDF)
library(plot3D)
# library(plotly)
inDir = 'W:/projects/2022_NOAA-NERRS_HudsonNY_144488/HawthorneValley/FEP_MVB_2022/AcousticIndices'
ACI_files = list.files(inDir, pattern = ".Rdata")
ACI_files
inDir = 'W:/projects/2022_NOAA-NERRS_HudsonNY_144488/HawthorneValley/FEP_MVB_2022/AcousticIndices'
ACI_files = list.files(inDir, pattern = ".Rdata")
i=1
thisFile = load(paste(inDir,ACI_files[i],sep="/"))
View(TSDF)
thisFile = load(paste(inDir,ACI_files[i],sep="/"))
TS = as.matrix(rep(TSDF$TimeStamps,times=length(binFreqs)))
freqVec = as.matrix(rep(binFreqs,each = nrow(TSDF)))
amp = as.matrix(c(as.matrix(allACImat)))
surf3D(x=TS,y=freqVec,z=amp)
View(allACImat)
MD01 = read.table('U:/projects/2013_UnivMD_Maryland_71485/KooguNARWDetEval/NewAnnotationTables/MD01_ground_truth.txt', sep="\t",header=TRUE,check.names=FALSE)
View(MD01)
fileStarts = regexpr('\d{8}_\d{6}',MD01$`File Offset (s)`)
library(stringr)
fileStarts = parse_date_time(str_extract(MD01$`Begin File`,"\\d{8}_\\d{6}"),'Ymd_HMS')
library(lubridate)
fileStarts = parse_date_time(str_extract(MD01$`Begin File`,"\\d{8}_\\d{6}"),'Ymd_HMS')
callStarts = fileStarts + dsecond(MD01$`File Offset (s)`)
callStarts = fileStarts + dseconds(MD01$`File Offset (s)`)
plot(fileStarts,rep(1,length(fileStarts),1),'p')
q = rep(1,length(fileStarts),1)
q = rep(1,length(fileStarts))
plot(fileStarts,rep(1,length(fileStarts)),'p')
timeBins = seq.Date(from=as.Date('2014-11-23'),to=as.Date('2015-04-30'),by=1)
whichBins = histc(as.numeric(fileStarts),as.numeric(timeBins))
library(pracma)
whichBins = histc(as.numeric(fileStarts),as.numeric(timeBins))
View(whichBins)
whichBins = histc(as.numeric(callStarts),as.numeric(timeBins))
ggplot(whichBin)+geom_bar(aex(y=cnt))
library(ggplot2)
ggplot(whichBin)+geom_bar(aex(y=cnt))
ggplot(whichBins)+geom_bar(aex(y=cnt))
whichBins = as.data.frame(whichBins)
plotDF = data.frame(Bins = timeBins,Counts = whichBins$cnt)
ggplot(plotDF)+geom_bar(aex(y=Counts))
ggplot(plotDF)+geom_bar(aes(y=Counts))
plot(cnt)
plot(whichBins$cnt)
class(callStarts)
class(timeBins)
as.numeric(timeBins[1])
as.numeric(callStarts[1])
timeBins = as.POSIXct(timeBins,'format="%Y-%m-%d')
as.numeric(timeBins[1])
whichBins = histc(as.numeric(callStarts),as.numeric(timeBins))
plotDF = data.frame(Bins = timeBins,Counts = whichBins$cnt)
ggplot(plotDF)+geom_bar(aes(y=Counts))
View(plotDF)
ggplot(plotDF)+geom_bar(aes(x=Bins,y=Counts))
ggplot(plotDF)+geom_col(aes(x=Bins,y=Counts))
hourBins = seq(1,24,1)
callHours = hm(callStarts)
as.character(callStarts[1])
callHours = hour(callStarts)
hist(callHours)
callHours = as.data.frame(hour(callStarts))
# Plot hourly call counts
hist(callHours)
View(callHours)
callHours = hour(callStarts)
# Plot hourly call counts
hist(callHours)
View(MD01)
## SETTINGS --------------------------------------------------------------------
library(tidyverse)
library(stringr)
library(R.matlab)
library(lubridate)
setwd("~/GitHub/HabitatModeling")
presDir = 'E:/Chpt_2/TimeSeries_ScaledByEffortError'
covarDir = 'E:/Chpt_3/CovarTS'
outDir = 'E:/Chpt_3/ModelData'
sites = c('HZ','OC','NC','BC','WC','NFC','HAT','GS','BP','BS')
covarAbbrev = cbind(c("Chl","FSLE","Salinity","SSH","Temperature","VelocityAsp","VelocityMag","EKE","AEddyDist","CEddyDist"),
c("Chl","FSLE","Sal","SSH","Temp","VelAsp","VelMag","EKE","AEddyDist","CEddyDist"))
# lags = c(7,14,21,28,42,56)
OC_change = as_date('2018-05-01') # account for change in OC site location
HAT_change = as_date('2017-05-01') # account for change in HAT location from site A to B
# Create a list of daily species presence files
presFiles = list.files(presDir, pattern="_Daily.csv", full.names=TRUE,recursive=FALSE)
goodFiles = c(1,2,4,8,11,13:15,17:19)
presFiles
# find covariate data
varFiles = list.files(covarDir,pattern=".csv",full.names=TRUE,recursive=FALSE)
staticFiles = list.files(covarDir,pattern="Geo",full.names=TRUE)
staticFiles = c(staticFiles,list.files(covarDir,pattern="Slope",full.names=TRUE))
varFiles
i=1
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
presFiles[i]
View(thisFile)
sites = c('HZ','OC','NC','BC','WC','NFC','HAT','GS','BP','BS','JAX')
colnames(thisFile) = c("Date",sites)
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
View(thisSpecies)
staticFiles[1]
varFiles[j]
thisVar[,1]
varFiles[j]
View(thisVar)
View(thisSpecies)
colnames(thisVar)
paste(sites[k],as.character(depths[l]),sep="")
paste('thisSpecies$',abbrev,as.character(depths[l]),' = NA',sep="")
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
View(thisSpecies)
outDir
sites
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
View(thisFile)
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
debugSource("~/GitHub/HabitatModeling/combine_Acoustic_with_covars.R")
source("~/GitHub/HabitatModeling/calcEKE.R")
source("~/GitHub/HabitatModeling/calcEKE.R")
library(stringr)
library(lubridate)
library(ncdf4)
library(ggplot2)
inDir = "J:/Chpt_3/HYCOM/0.08deg" # directory containing .RData files
inDir = "E:/Chpt_3/HYCOM/0.08deg" # directory containing .RData files
outDir = 'E:/Chpt_3/CovarTS'
sites = c('HZ','OC','NC','BC','WC','NFC','HAT','GS','BP','BS','JAX')
# Only change these if using different sites
OC_change = as_date('2018-05-01') # account for change in
HAT_change = as_date('2017-05-01') # account for change in HAT location from site A to B
HARPs = data.frame(t(data.frame(c(41.06165, -66.35155), # WAT_HZ
c(40.26333,-67.9861,40.22999, -67.97798),  # WAT_OC
c(39.83295, -69.98194),  # WAT_NC
c(39.19192, -72.22735),  # WAT_BC
c(38.37337, -73.36985),  # WAT_WC
c(37.16452, -74.46585),  # NFC
c(35.30183,-74.8789,35.5841,-74.7499),  # HAT_A & HAT_B
c(33.66992, -75.9977),   # WAT_GS
c(32.10527, -77.09067),  # WAT_BP
c(30.58295, -77.39002),  # WAT_BS
c(30.27818, -80.22085))))  # JAX_D
rownames(HARPs) = sites
colnames(HARPs) = c("Lat1", "Lon1", "Lat2", "Lon2")
View(HARPs)
HARPs$Lon1 = HARPs$Lon1+360
HARPs$Lon2 = HARPs$Lon2+360
fullFileList = dir(inDir,".Rdata")
# Covars of interest
Covars = list("EKE")
fullFileList
# Covars of interest
Covars = list("EKE")
j=1
if (j%in%c(2:3)){
depths=c(seq(0,100,by=10),seq(150,300,by=50),seq(400,800,by=100))
} else {
depths = 0
}
depths=c(seq(0,100,by=10),seq(150,300,by=50),seq(400,800,by=100))
k=1
thisCovar = which(str_detect(fullFileList,unlist(Covars[j])))
thisDepth = which(str_detect(fullFileList,paste('_',depths[k],'_',sep="")))
fileInd = intersect(thisCovar,thisDepth)
# initialize arrays to hold data from all files matching sites
masterData.Data=double()
masterData.Lat=double()
masterData.Lon=double()
masterData.Time=double()
i=1
paste(inDir,'/',fullFileList[fileInd[i]],sep="")
debugSource("~/GitHub/HabitatModeling/makeHYCOM_TS.R")
View(masterData.Data)
paste(outDir,'/',Covars[j],'_',depths[k],'_TS.Rdata',sep="")
library(gridExtra)
library(ggplot2)
library(dplyr)
library(rlang)
library(lubridate)
library(stringr)
library(stats)
library(pracma)
library(splines)
inDir = 'E:/Chpt_3/CovarTS'
outDir = 'E:/Chpt_3/CovarPlots'
fileList = dir(inDir,pattern=".Rdata")
## Clean HYCOM data --------------------------------
# Downloaded HYCOM data are daily at 2/25th (0.08) degrees irregular spatial resolution, re-gridded to 0.08deg
# vars = c('SSH','Salinity','Temperature','VelocityMag','VelocityAsp','EKE')
vars = 'EKE'
lon = ""
j=1
# NOTE: If remaking profile files, delete old ones from inDir, or they will be concatenated with new ones
library(pracma)
inDir = 'E:/Chpt_3/CovarTS'
fileList = dir(inDir)
covar = "EKE"
lon = ""
depths=c(seq(0,100,by=10),seq(150,300,by=50),seq(400,800,by=100))
whichInd = which(!is.na(str_match(fileList,covar)) & !is.na(str_match(fileList,lon)))
HZProfile = numeric()
OCProfile = numeric()
NCProfile = numeric()
BCProfile = numeric()
WCProfile = numeric()
NFCProfile = numeric()
fileList
whichInd = which(!is.na(str_match(fileList,covar)) & !is.na(str_match(fileList,lon)))
lon = "ES"
whichInd = which(!is.na(str_match(fileList,covar)) & !is.na(str_match(fileList,lon)))
fileList[whichInd]
lon = "TS.Rdata"
whichInd = which(!is.na(str_match(fileList,covar)) & !is.na(str_match(fileList,lon)))
fileList[whichInd]
for (i in 1:length(depths)){
thisDepth = which(!is.na(str_match(fileList[whichInd],paste('_',as.character(depths[i]),'_',sep=""))))
if (!isempty(thisDepth)){
load(paste(inDir,'/',fileList[whichInd[thisDepth]],sep=""))
} else {
masterData.Data = rep(NA,nrow=11,ncol=1191)
}
HZProfile = rbind(HZProfile,masterData.Data[1,])
OCProfile = rbind(OCProfile,masterData.Data[2,])
NCProfile = rbind(NCProfile,masterData.Data[3,])
BCProfile = rbind(BCProfile,masterData.Data[4,])
WCProfile = rbind(WCProfile,masterData.Data[5,])
NFCProfile = rbind(NFCProfile,masterData.Data[6,])
HATProfile = rbind(HATProfile,masterData.Data[7,])
GSProfile = rbind(GSProfile,masterData.Data[8,])
BPProfile = rbind(BPProfile,masterData.Data[9,])
BSProfile = rbind(BSProfile,masterData.Data[10,])
JAXProfile = rbind(JAXProfile,masterData.Data[11,])
}
HZProfile = numeric()
OCProfile = numeric()
NCProfile = numeric()
BCProfile = numeric()
WCProfile = numeric()
NFCProfile = numeric()
HATProfile = numeric()
GSProfile = numeric()
BPProfile = numeric()
BSProfile = numeric()
JAXProfile = numeric()
for (i in 1:length(depths)){
thisDepth = which(!is.na(str_match(fileList[whichInd],paste('_',as.character(depths[i]),'_',sep=""))))
if (!isempty(thisDepth)){
load(paste(inDir,'/',fileList[whichInd[thisDepth]],sep=""))
} else {
masterData.Data = rep(NA,nrow=11,ncol=1191)
}
HZProfile = rbind(HZProfile,masterData.Data[1,])
OCProfile = rbind(OCProfile,masterData.Data[2,])
NCProfile = rbind(NCProfile,masterData.Data[3,])
BCProfile = rbind(BCProfile,masterData.Data[4,])
WCProfile = rbind(WCProfile,masterData.Data[5,])
NFCProfile = rbind(NFCProfile,masterData.Data[6,])
HATProfile = rbind(HATProfile,masterData.Data[7,])
GSProfile = rbind(GSProfile,masterData.Data[8,])
BPProfile = rbind(BPProfile,masterData.Data[9,])
BSProfile = rbind(BSProfile,masterData.Data[10,])
JAXProfile = rbind(JAXProfile,masterData.Data[11,])
}
save(HZProfile,
OCProfile,
NCProfile,
BCProfile,
WCProfile,
NFCProfile,
HATProfile,
GSProfile,
BPProfile,
BSProfile,
JAXProfile,
masterData.Time,
depths,
file=paste(inDir,'/',covar,'_Profiles.Rdata',sep=""))
library(gridExtra)
library(ggplot2)
library(dplyr)
library(rlang)
library(lubridate)
library(stringr)
library(stats)
library(pracma)
library(splines)
inDir = 'E:/Chpt_3/CovarTS'
outDir = 'E:/Chpt_3/CovarPlots'
fileList = dir(inDir,pattern=".Rdata")
## Clean HYCOM data --------------------------------
# Downloaded HYCOM data are daily at 2/25th (0.08) degrees irregular spatial resolution, re-gridded to 0.08deg
# vars = c('SSH','Salinity','Temperature','VelocityMag','VelocityAsp','EKE')
vars = 'EKE'
## Clean HYCOM data --------------------------------
# Downloaded HYCOM data are daily at 2/25th (0.08) degrees irregular spatial resolution, re-gridded to 0.08deg
# vars = c('SSH','Salinity','Temperature','VelocityMag','VelocityAsp','EKE')
vars = 'EKE'
lon = ".Rdata"
j=1
TSind = which(!is.na(str_match(fileList,paste(vars[j],'_Profiles',sep=""))) & !is.na(str_match(fileList,lon)))
fileList[TSind]
TSind=43
fileList[TSind]
load(paste(inDir,'/',fileList[TSind],sep=""))
ouDFs = 'fullEKE'
depths = c(0,100,200,300,400,500,600,700,800) # desired depth layers
eval(parse(text=paste('full',vars[j],' = data.frame(Time=seq.Date(from=as.Date("2016-02-01",origin="1970-01-01"),to=as.Date("2019-04-30",origin="1970-01-01"),by=1))',sep="")))
for (l in 1:length(depths)){
eval(parse(text=paste('Temp = data.frame(HZ',depths[l],'=HZProfile[l,],
OC',depths[l],'=OCProfile[l,],
NC',depths[l],'=NCProfile[l,],
BC',depths[l],'=BCProfile[l,],
WC',depths[l],'=WCProfile[l,],
NFC',depths[l],'=NFCProfile[l,],
HAT',depths[l],'=HATProfile[l,],
GS',depths[l],'=GSProfile[l,],
BP',depths[l],'=BPProfile[l,],
BS',depths[l],'=BSProfile[l,],
JAX',depths[l],'=JAXProfile[l,])',sep="")))
sites = colnames(Temp)
siteName = str_replace(sites,as.character(depths[l]),"")
for (i in 1:11){
eval(parse(text=paste('Temp$',sites[i],'[is.nan(Temp$',sites[i], ')] = NA',sep="")))
eval(parse(text=paste('Temp$',sites[i],'[Temp$',sites[i],'==0] = NA',sep="")))
}
# Histograms
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j-1],title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist_ES.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot_ES.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
# Remove outliers?
q25 = quantile(stack(Temp)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Temp)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
upperThresh = q75+(1.5*iqr)
lowerThresh = q25-(1.5*iqr)
# Interpolate missing dates and NAs (can't interpolate JAX at most depths, too little data!)
# if (l==1){
#   for (i in 1:11){
#     datBins = which(!is.na(Temp[,i]))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
#   }
# } else {
for (i in 1:10){
datBins = which(!is.na(Temp[,i]))
eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
}
#   # add (likely hole-y) JAX data without interpolation
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'=NA',sep="")))
#   eval(parse(text=paste('putWhere = match(masterData.Time,full',vars[j],'$Time)',sep="")))
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'[putWhere[!is.na(putWhere)]]=Temp[-which(is.na(putWhere)),i+1]',sep="")))
# }
}
paste(intToUtf8(176),"C",sep=""),"m/s",intToUtf8(176),paste(expression("cm"^2),'/',expression("s"^2),sep="")
paste(expression("cm"^2),'/',expression("s"^2),sep="")
units = paste(expression("cm"^2),'/',expression("s"^2),sep="")
for (l in 1:length(depths)){
eval(parse(text=paste('Temp = data.frame(HZ',depths[l],'=HZProfile[l,],
OC',depths[l],'=OCProfile[l,],
NC',depths[l],'=NCProfile[l,],
BC',depths[l],'=BCProfile[l,],
WC',depths[l],'=WCProfile[l,],
NFC',depths[l],'=NFCProfile[l,],
HAT',depths[l],'=HATProfile[l,],
GS',depths[l],'=GSProfile[l,],
BP',depths[l],'=BPProfile[l,],
BS',depths[l],'=BSProfile[l,],
JAX',depths[l],'=JAXProfile[l,])',sep="")))
sites = colnames(Temp)
siteName = str_replace(sites,as.character(depths[l]),"")
for (i in 1:11){
eval(parse(text=paste('Temp$',sites[i],'[is.nan(Temp$',sites[i], ')] = NA',sep="")))
eval(parse(text=paste('Temp$',sites[i],'[Temp$',sites[i],'==0] = NA',sep="")))
}
# Histograms
for (i in 1:11){
eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
sites[i],'))+labs(x=units[j-1],title=sites[i])',sep=""))))
}
png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist_ES.png",sep=""),width = 800, height = 800, units = "px")
grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
while (dev.cur()>1) {dev.off()}
# Plot boxplots and calculate quantiles to identify outliers
ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot_ES.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
# Remove outliers?
q25 = quantile(stack(Temp)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Temp)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
upperThresh = q75+(1.5*iqr)
lowerThresh = q25-(1.5*iqr)
# Interpolate missing dates and NAs (can't interpolate JAX at most depths, too little data!)
# if (l==1){
#   for (i in 1:11){
#     datBins = which(!is.na(Temp[,i]))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
#   }
# } else {
for (i in 1:10){
datBins = which(!is.na(Temp[,i]))
eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
}
#   # add (likely hole-y) JAX data without interpolation
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'=NA',sep="")))
#   eval(parse(text=paste('putWhere = match(masterData.Time,full',vars[j],'$Time)',sep="")))
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'[putWhere[!is.na(putWhere)]]=Temp[-which(is.na(putWhere)),i+1]',sep="")))
# }
}
for (l in 1:length(depths)){
eval(parse(text=paste('Temp = data.frame(HZ',depths[l],'=HZProfile[l,],
OC',depths[l],'=OCProfile[l,],
NC',depths[l],'=NCProfile[l,],
BC',depths[l],'=BCProfile[l,],
WC',depths[l],'=WCProfile[l,],
NFC',depths[l],'=NFCProfile[l,],
HAT',depths[l],'=HATProfile[l,],
GS',depths[l],'=GSProfile[l,],
BP',depths[l],'=BPProfile[l,],
BS',depths[l],'=BSProfile[l,],
JAX',depths[l],'=JAXProfile[l,])',sep="")))
sites = colnames(Temp)
siteName = str_replace(sites,as.character(depths[l]),"")
for (i in 1:11){
eval(parse(text=paste('Temp$',sites[i],'[is.nan(Temp$',sites[i], ')] = NA',sep="")))
eval(parse(text=paste('Temp$',sites[i],'[Temp$',sites[i],'==0] = NA',sep="")))
}
# Histograms
# for (i in 1:11){
#   eval(parse(text=(paste(siteName[i],' = ggplot(data=Temp)+geom_histogram(aes(x=',
#                          sites[i],'))+labs(x=units[j-1],title=sites[i])',sep=""))))
# }
# png(file=paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_hist_ES.png",sep=""),width = 800, height = 800, units = "px")
# grid.arrange(HZ,NC,OC,BC,WC,NFC,HAT,GS,BP,BS,JAX, ncol=4,nrow=3,top=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
# while (dev.cur()>1) {dev.off()}
#
# # Plot boxplots and calculate quantiles to identify outliers
# ggplot(stack(Temp))+geom_boxplot(aes(x=ind,y=values))+labs(x="Site & Depth",y=units[j-1],title=paste(vars[j],' at ',as.character(depths[l]),'m',sep=""))
# ggsave(paste(outDir,'/',vars[j],'_',as.character(depths[l]),"_boxplot_ES.png",sep=""),device="png",width=600,height=800,units="px",scale=5,dpi=600)
#
# Remove outliers?
q25 = quantile(stack(Temp)$values,probs=0.25,na.rm=TRUE)
q75 = quantile(stack(Temp)$values,probs=0.75,na.rm=TRUE)
iqr = q75-q25
upperThresh = q75+(1.5*iqr)
lowerThresh = q25-(1.5*iqr)
# Interpolate missing dates and NAs (can't interpolate JAX at most depths, too little data!)
# if (l==1){
#   for (i in 1:11){
#     datBins = which(!is.na(Temp[,i]))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
#     eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
#   }
# } else {
for (i in 1:10){
datBins = which(!is.na(Temp[,i]))
eval(parse(text=paste('full',vars[j],'$',sites[i],'=NA',sep="")))
eval(parse(text=paste('full',vars[j],'$',sites[i],' = (approx(x=masterData.Time[datBins],y=Temp[datBins,i],xout=full',vars[j],'[,1],method="linear"))$y',sep="")))
}
#   # add (likely hole-y) JAX data without interpolation
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'=NA',sep="")))
#   eval(parse(text=paste('putWhere = match(masterData.Time,full',vars[j],'$Time)',sep="")))
#   eval(parse(text=paste('full',vars[j],'$',sites[i+1],'[putWhere[!is.na(putWhere)]]=Temp[-which(is.na(putWhere)),i+1]',sep="")))
# }
}
View(fullEKE)
